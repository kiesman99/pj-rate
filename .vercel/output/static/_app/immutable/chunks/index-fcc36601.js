function A(){}function M(n){return n()}function C(){return Object.create(null)}function p(n){n.forEach(M)}function D(n){return typeof n=="function"}function rn(n,t){return n!=n?t==t:n!==t||n&&typeof n=="object"||typeof n=="function"}function F(n){return Object.keys(n).length===0}function H(n,...t){if(n==null)return A;const e=n.subscribe(...t);return e.unsubscribe?()=>e.unsubscribe():e}function cn(n,t,e){n.$$.on_destroy.push(H(t,e))}let g=!1;function I(){g=!0}function L(){g=!1}function W(n,t,e,l){for(;n<t;){const u=n+(t-n>>1);e(u)<=l?n=u+1:t=u}return n}function G(n){if(n.hydrate_init)return;n.hydrate_init=!0;let t=n.childNodes;if(n.nodeName==="HEAD"){const i=[];for(let c=0;c<t.length;c++){const f=t[c];f.claim_order!==void 0&&i.push(f)}t=i}const e=new Int32Array(t.length+1),l=new Int32Array(t.length);e[0]=-1;let u=0;for(let i=0;i<t.length;i++){const c=t[i].claim_order,f=(u>0&&t[e[u]].claim_order<=c?u+1:W(1,u,y=>t[e[y]].claim_order,c))-1;l[i]=e[f]+1;const a=f+1;e[a]=i,u=Math.max(a,u)}const s=[],r=[];let o=t.length-1;for(let i=e[u]+1;i!=0;i=l[i-1]){for(s.push(t[i-1]);o>=i;o--)r.push(t[o]);o--}for(;o>=0;o--)r.push(t[o]);s.reverse(),r.sort((i,c)=>i.claim_order-c.claim_order);for(let i=0,c=0;i<r.length;i++){for(;c<s.length&&r[i].claim_order>=s[c].claim_order;)c++;const f=c<s.length?s[c]:null;n.insertBefore(r[i],f)}}function J(n,t){if(g){for(G(n),(n.actual_end_child===void 0||n.actual_end_child!==null&&n.actual_end_child.parentNode!==n)&&(n.actual_end_child=n.firstChild);n.actual_end_child!==null&&n.actual_end_child.claim_order===void 0;)n.actual_end_child=n.actual_end_child.nextSibling;t!==n.actual_end_child?(t.claim_order!==void 0||t.parentNode!==n)&&n.insertBefore(t,n.actual_end_child):n.actual_end_child=t.nextSibling}else(t.parentNode!==n||t.nextSibling!==null)&&n.appendChild(t)}function ln(n,t,e){g&&!e?J(n,t):(t.parentNode!==n||t.nextSibling!=e)&&n.insertBefore(t,e||null)}function K(n){n.parentNode.removeChild(n)}function Q(n){return document.createElement(n)}function E(n){return document.createTextNode(n)}function un(){return E(" ")}function on(){return E("")}function sn(n,t,e){e==null?n.removeAttribute(t):n.getAttribute(t)!==e&&n.setAttribute(t,e)}function R(n){return Array.from(n.childNodes)}function U(n){n.claim_info===void 0&&(n.claim_info={last_index:0,total_claimed:0})}function T(n,t,e,l,u=!1){U(n);const s=(()=>{for(let r=n.claim_info.last_index;r<n.length;r++){const o=n[r];if(t(o)){const i=e(o);return i===void 0?n.splice(r,1):n[r]=i,u||(n.claim_info.last_index=r),o}}for(let r=n.claim_info.last_index-1;r>=0;r--){const o=n[r];if(t(o)){const i=e(o);return i===void 0?n.splice(r,1):n[r]=i,u?i===void 0&&n.claim_info.last_index--:n.claim_info.last_index=r,o}}return l()})();return s.claim_order=n.claim_info.total_claimed,n.claim_info.total_claimed+=1,s}function V(n,t,e,l){return T(n,u=>u.nodeName===t,u=>{const s=[];for(let r=0;r<u.attributes.length;r++){const o=u.attributes[r];e[o.name]||s.push(o.name)}s.forEach(r=>u.removeAttribute(r))},()=>l(t))}function an(n,t,e){return V(n,t,e,Q)}function X(n,t){return T(n,e=>e.nodeType===3,e=>{const l=""+t;if(e.data.startsWith(l)){if(e.data.length!==l.length)return e.splitText(l.length)}else e.data=l},()=>E(t),!0)}function fn(n){return X(n," ")}function dn(n,t){t=""+t,n.wholeText!==t&&(n.data=t)}function _n(n,t,e,l){e===null?n.style.removeProperty(t):n.style.setProperty(t,e,l?"important":"")}let m;function h(n){m=n}function O(){if(!m)throw new Error("Function called outside component initialization");return m}function hn(n){O().$$.on_mount.push(n)}function mn(n){O().$$.after_update.push(n)}const _=[],k=[],x=[],B=[],P=Promise.resolve();let v=!1;function q(){v||(v=!0,P.then(z))}function pn(){return q(),P}function N(n){x.push(n)}const w=new Set;let b=0;function z(){const n=m;do{for(;b<_.length;){const t=_[b];b++,h(t),Y(t.$$)}for(h(null),_.length=0,b=0;k.length;)k.pop()();for(let t=0;t<x.length;t+=1){const e=x[t];w.has(e)||(w.add(e),e())}x.length=0}while(_.length);for(;B.length;)B.pop()();v=!1,w.clear(),h(n)}function Y(n){if(n.fragment!==null){n.update(),p(n.before_update);const t=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,t),n.after_update.forEach(N)}}const $=new Set;let d;function yn(){d={r:0,c:[],p:d}}function bn(){d.r||p(d.c),d=d.p}function Z(n,t){n&&n.i&&($.delete(n),n.i(t))}function xn(n,t,e,l){if(n&&n.o){if($.has(n))return;$.add(n),d.c.push(()=>{$.delete(n),l&&(e&&n.d(1),l())}),n.o(t)}else l&&l()}function $n(n){n&&n.c()}function gn(n,t){n&&n.l(t)}function nn(n,t,e,l){const{fragment:u,on_mount:s,on_destroy:r,after_update:o}=n.$$;u&&u.m(t,e),l||N(()=>{const i=s.map(M).filter(D);r?r.push(...i):p(i),n.$$.on_mount=[]}),o.forEach(N)}function tn(n,t){const e=n.$$;e.fragment!==null&&(p(e.on_destroy),e.fragment&&e.fragment.d(t),e.on_destroy=e.fragment=null,e.ctx=[])}function en(n,t){n.$$.dirty[0]===-1&&(_.push(n),q(),n.$$.dirty.fill(0)),n.$$.dirty[t/31|0]|=1<<t%31}function wn(n,t,e,l,u,s,r,o=[-1]){const i=m;h(n);const c=n.$$={fragment:null,ctx:null,props:s,update:A,not_equal:u,bound:C(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(i?i.$$.context:[])),callbacks:C(),dirty:o,skip_bound:!1,root:t.target||i.$$.root};r&&r(c.root);let f=!1;if(c.ctx=e?e(n,t.props||{},(a,y,...S)=>{const j=S.length?S[0]:y;return c.ctx&&u(c.ctx[a],c.ctx[a]=j)&&(!c.skip_bound&&c.bound[a]&&c.bound[a](j),f&&en(n,a)),y}):[],c.update(),f=!0,p(c.before_update),c.fragment=l?l(c.ctx):!1,t.target){if(t.hydrate){I();const a=R(t.target);c.fragment&&c.fragment.l(a),a.forEach(K)}else c.fragment&&c.fragment.c();t.intro&&Z(n.$$.fragment),nn(n,t.target,t.anchor,t.customElement),L(),z()}h(i)}class vn{$destroy(){tn(this,1),this.$destroy=A}$on(t,e){const l=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return l.push(e),()=>{const u=l.indexOf(e);u!==-1&&l.splice(u,1)}}$set(t){this.$$set&&!F(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}export{A,J as B,cn as C,vn as S,un as a,ln as b,fn as c,bn as d,on as e,Z as f,K as g,mn as h,wn as i,Q as j,an as k,R as l,sn as m,_n as n,hn as o,E as p,X as q,dn as r,rn as s,xn as t,yn as u,$n as v,gn as w,nn as x,tn as y,pn as z};
